/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

export namespace util {

    class UtilHelper {

        static {
            loadLibrary("commonlib_ets_ani")
        }
    
        internal static native generateRandomUUID(entropyCache: boolean): string
    
        internal static objectToString(obj: Object, full: boolean = false): string {
            return (new UtilHelper).stringifyObject(obj, '\n', 1, full)
        }
    
        private static isNullObject(obj: NullishType): boolean {
            return (obj == undefined) || (obj == null)
        }
    
        private static isFunction(obj: Object): boolean {
            return (typeof obj === 'function')
        }
    
        private static isObject(obj: Object): boolean {
            return (typeof obj === 'object')
        }
    
        private static isString(obj: Object): boolean {
            return (typeof obj === 'string')
        }
    
        private static isArray(obj: Object): boolean {
            return obj instanceof Array
        }
    
        private stringifySubObject(delimiter: string, subObj: NullishType, subObjName: string, depth: number, full: boolean = false): string {
    
            if (UtilHelper.isNullObject(subObj)) {
                return UtilHelper.nullObjectDescription(subObjName) + ',' + delimiter
            }
    
            let strB = new StringBuilder
    
            if (UtilHelper.isArray(subObj!)) {
                strB.append(subObjName + ':' + delimiter + UtilHelper.arrayToString(delimiter + '  ', subObj! as Array<Object>, depth, full))
            } else if (UtilHelper.isObject(subObj!)) {
                strB.append(this.subObjectDescription(subObj!, subObjName, this.isCircular(subObj!), delimiter, depth))
            } else if (UtilHelper.isFunction(subObj!)) {
                strB.append(UtilHelper.functionDescription(subObj!, delimiter, true, full))
            } else {
                strB.append(UtilHelper.simpleObjectDescription(subObj!, subObjName, true))
            }
            this.objects.add(subObj!)
    
            strB.append(',' + delimiter)
            return strB.toString()
        }
    
        private objectDescription(obj: Object, delimiter: string = '\n', depth: number = 1, full: boolean = false): string {
    
            let strB = new StringBuilder('{ ')
            let isComplexObject: boolean = false
    
            for (const objEntry of Object.entries(obj)) {
                if (!objEntry) {
                    continue
                }
                isComplexObject = true
                strB.append(this.stringifySubObject(delimiter, objEntry[1], objEntry[0], depth, full))
            }
    
            if (!isComplexObject) {
                return JSON.stringify(obj)
            }
    
            return strB.toString().slice(0,- delimiter.length - 1) + ' }'
        }
    
        private subObjectDescription(obj: Object, objName: string, isCircular: boolean, delimiter: string, depth: number): string {
            if (isCircular) {
                return objName + ': [Circular]' + delimiter
            }
            return objName + ':' + delimiter + this.stringifyObject(obj, delimiter + '  ', depth + 1, true)
        }
    
        private objects = new Set<Object>
    
        private isCircular(obj: NullishType): boolean {
            if (obj == null) {
                return false
            }
    
            return this.objects.has(obj)
        }
    
        private static nullObjectDescription(objName: string = ''): string {
            return ((objName != '') ? objName + ': ' : '') + null
        }
    
        private static simpleObjectDescription(obj: Object, objName: string = '', isSub: boolean = false): string {
            let quotesStr = UtilHelper.isString(obj) ? '\'' : ''
            return (isSub ? objName + ': ' : '') + quotesStr + obj + quotesStr
        }
    
        private stringifyObject(obj: NullishType, delimiter: string = '\n', depth: number = 1, full: boolean = false): string {
    
            if (UtilHelper.isNullObject(obj)) {
                return UtilHelper.nullObjectDescription()
            }
    
            this.objects.add(obj!)
            let strB = new StringBuilder
            if (UtilHelper.isArray(obj!)) {
                strB.append(UtilHelper.arrayToString(delimiter, obj! as Array<Object>, depth, full))
            } else if (UtilHelper.isFunction(obj!)) {
                strB.append(UtilHelper.functionDescription(obj!, delimiter, false, full))
                if (!full) {
                    strB = (new StringBuilder).append('{ ').append(strB.toString()).append(' }')
                }
            } else if (UtilHelper.isObject(obj!)) {
                strB.append(this.objectDescription(obj!, delimiter, depth, full))
            } else {
                strB.append(UtilHelper.simpleObjectDescription(obj!, ''))
            }
            return strB.toString()
        }
    
        private static arrayToString(delimiter: string, arr: Array<Object>, depth: number, full: boolean = false): string {
            return ('[ ' + UtilHelper.arrayToStringImpl(delimiter, arr, depth, full) + (full ? ('[length]: ' + arr.length) : '') + ' ]')
        }
    
        private static functionDescription(obj: Object, delimiter: string = '\n', isSub: boolean = false, full: boolean = false, inArray: boolean = false): string {
            let strB = new StringBuilder
            let functionName = UtilHelper.getName(obj)
            strB.append((isSub && functionName !== '') ? (functionName + ':' + delimiter) : '');
    
            let baseFunctionStr = '[Function: ' + functionName + ']'
    
            if (full) {
                let end = delimiter + (inArray || isSub) ? '  ' : '';
                let length = UtilHelper.getLength(obj)
                strB.append('{ ' + baseFunctionStr + end +
                    '[length]: ' + (length ? length : 0) + ',' + end +
                    '[name] :\'' + functionName + '\',' + end +
                    '[prototype]: ' + functionName + ' { [constructor]: [Circular] } }')
            } else {
                strB.append(baseFunctionStr)
            }
    
            return strB.toString()
        }
    
        private static arrayToStringImpl(delimiter: string, arr: Array<Object>, depth: number, full: boolean = false): string {
            if (!arr.length) {
                return ''
            }
    
            let arrayDelimiter: string = ', '
    
            for (let item of arr) {
                if (!UtilHelper.isNullObject(item) && (UtilHelper.isFunction(item) || UtilHelper.isObject(item) && depth <= 2)) {
                    arrayDelimiter += delimiter
                    break
                }
            }
    
            let strB = new StringBuilder
            for (let item of arr) {
                if (UtilHelper.isObject(item)) {
                    strB.append((new UtilHelper).stringifyObject(item, delimiter + '  ', depth + 1, full))
                } else if (UtilHelper.isFunction(item)) {
                    strB.append(UtilHelper.functionDescription(item, delimiter, false, full, true))
                } else {
                    strB.append(UtilHelper.simpleObjectDescription(item, full ? UtilHelper.getName(item) : ''))
                }
                strB.append(arrayDelimiter)
            }
    
            return strB.toString().slice(0, -arrayDelimiter.length)
        }
    
        private static getName(obj: Object): string {
            let subObj = UtilHelper.getValue("name", obj)
            return subObj ? subObj! as string : 'null'
        }
    
        private static getLength(obj: Object): int {
            let subObj = UtilHelper.getValue("length", obj)
            return subObj ? subObj! as int : 0
        }
    
        private static getValue(key: string, obj: Object): NullishType {
            if (!obj) {
                return null
            }
            for (const objEntry of Object.entries(obj)) {
                if (!objEntry) {
                    continue
                }
                if ((!objEntry[0]) && (objEntry[0] == key)) {
                    return objEntry[1]
                }
            }
            return null
        }
    
        /**
          * Remove html tag, css, js of html string to extract the contents
          * @param {String} html
          * @return {String} contents of the html
          */
        static extractContents(html: string): string {
            return html
                .replace(new RegExp("(\n|\r|\t)","gm"), '') // remove linebreaks
                .replace(new RegExp("<(style|script|link|noscript).*?>.*?<\/(style|script|link|noscript)>","g"), '') // remove css, js blocks
                .replace(new RegExp("<!--.*?-->","g"), '') // remove comments
                .replace(new RegExp("<.*?>","g"), '') // remove tags
                .replace(new RegExp("[\s\!\@\#\$\%\^\&\*\(\)\_\+\-\=\{\}\[\]\:\"\;\'\<\>\?\,\.\/\|\\\`\~]+","g"), '') // remove Chars
                .trim()
        }
    
        static processArg(flag: string, arg: Object): string {
            // %c: CSS. This specifier is ignored and will skip any CSS passed in.
            if (flag == "c" && (arg instanceof String)) {
                return UtilHelper.extractContents(arg as string)
            } else if (flag == "s" && !(arg instanceof BigInt)) {
                if (arg instanceof BigInt || arg instanceof Char) {
                    throw new Error("invalid flag " + flag + " for arg " + arg as string)
                }
                return arg as string
            } else if (flag == "d") {
                if (arg instanceof BigInt || arg instanceof Char) {
                    throw new Error("invalid flag " + flag + " for arg " + arg as string)
                }
                return "" + new Number(arg.toString())
            } else if (flag == "i") {
                if (arg instanceof BigInt || arg instanceof Char) {
                    throw new Error("invalid flag " + flag + " for arg " + arg as string)
                }
                return "" + parseInt(arg as string, 10)
            }
            else if (flag == "f") {
                if (arg instanceof Char) {
                    throw new Error("invalid flag " + flag + " for arg " + arg as string)
                }
                return "" + parseFloat(arg as string)
            } else if (flag == "j") {
                let res = ""
                try {
                    res = JSON.stringify(arg)
                }
                catch(error) {
                    if (typeof arg === "object") {
                        return UtilHelper.objectToString(arg)
                    } else {
                        throw new Error("error parse json")
                    }
                }
    
            return res
            } else if (flag == "o") {
                // Object. A string representation of an object
                // Similar to util.inspect() with options { showHidden: true, showProxy: true }
                return UtilHelper.objectToString(arg, true)
            } else if (flag == "O") {
                // Object. A string representation of an object
                // Similar to util.inspect() without options
                return UtilHelper.objectToString(arg)
            }
    
            return "%" + flag
        }
    
        static joinLastArgs(index: int, ...args: Object[]): string {
            let sb = new StringBuilder
            for (let i = index; i < args.length; ++i) {
                sb.append(" ")
                sb.append(args[i])
            }
            let res = sb.toString()
            return res
        }
    
    }  // class UtilHelper

    export enum Type {
        BASIC,
        MIME,
        BASIC_URL_SAFE,
        MIME_URL_SAFE,
    }

    export class Base64Helper {
        private static BASE64_CHARS: string = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        private static BASE64_URL_SAFE_CHARS: string = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";

        private static readonly BYTE_SIZE = 8;
        private static readonly BASE64_GROUP_SIZE = 6;
        private static readonly BASE64_MASK = 0x3F;
        private static readonly LINE_BREAK_FREQUENCY = 76;

        constructor() {}

        private static encodeBase64(bytes: Uint8Array, urlSafe: boolean, mime: boolean): string {
            let table = urlSafe ? Base64Helper.BASE64_URL_SAFE_CHARS : Base64Helper.BASE64_CHARS;
            let binaryString: string = "";
            for (let i = 0; i < bytes.length; i++) {
                binaryString += String.fromCharCode(bytes[i]);
            }
            let encoded: string = "";
            let buffer: int = 0;
            let bufferLength: int = 0;

            for (let i = 0; i < binaryString.length; i++) {
                buffer = (buffer << Base64Helper.BYTE_SIZE) | binaryString.charCodeAt(i);
                bufferLength += Base64Helper.BYTE_SIZE;
                while (bufferLength >= Base64Helper.BASE64_GROUP_SIZE) {
                    bufferLength -= Base64Helper.BASE64_GROUP_SIZE;
                    encoded += table[(buffer >> bufferLength) & Base64Helper.BASE64_MASK];
                }
            }

            if (bufferLength > 0) {
                encoded += table[(buffer << (Base64Helper.BASE64_GROUP_SIZE - bufferLength)) & Base64Helper.BASE64_MASK];
            }

            while (encoded.length % 4 !== 0 && !urlSafe) {
                encoded += "=";
            }

            if (mime) {
                encoded = encoded.replace(new RegExp(`(.{${Base64Helper.LINE_BREAK_FREQUENCY}})`, "g"), "$1\r\n");
            }
            return encoded;
        }

        private static decodeBase64(base64: string, urlSafe: boolean): Uint8Array {
            let table = urlSafe ? Base64Helper.BASE64_URL_SAFE_CHARS : Base64Helper.BASE64_CHARS;
            let allowedPattern = urlSafe ? "[^A-Za-z0-9\\-_=]" : "[^A-Za-z0-9+/=]";
            let cleaned: string = base64.replace(new RegExp(allowedPattern, "g"), "");
            let buffer: int = 0;
            let bufferLength: int = 0;
            let bytes: Array<number> = new Array<number>();

            for (let i = 0; i < cleaned.length; i++) {
                let char: string = cleaned[i];
                if (char == "=") {
                    break;
                }
                let index: int = table.indexOf(char) as int;
                if (index == -1) {
                    continue;
                }
                buffer = (buffer << Base64Helper.BASE64_GROUP_SIZE) | index;
                bufferLength += Base64Helper.BASE64_GROUP_SIZE;
                if (bufferLength >= Base64Helper.BYTE_SIZE) {
                    bufferLength -= Base64Helper.BYTE_SIZE;
                    bytes.push((buffer >> bufferLength) & 0xFF);
                }
            }
            return new Uint8Array(bytes);
        }

        encodeSync(src: Uint8Array, options: Type = Type.BASIC): Uint8Array {
            let encoded: string = Base64Helper.encodeBase64(src, options === Type.BASIC_URL_SAFE || options === Type.MIME_URL_SAFE, options === Type.MIME);
            let result: Uint8Array = new Uint8Array(encoded.length);
            for (let i: int = 0; i < encoded.length; i++) {
                result[i] = encoded.charCodeAt(i);
            }
            return result;
        }

        encodeToStringSync(src: Uint8Array, options: Type = Type.BASIC): string {
            return Base64Helper.encodeBase64(src, options === Type.BASIC_URL_SAFE || options === Type.MIME_URL_SAFE, options === Type.MIME);
        }

        decodeSync(src: Uint8Array, options: Type = Type.BASIC): Uint8Array {
            let base64String: string;
            let charArray: Array<string> = new Array<string>();
            for (let i: int = 0; i < src.length; i++) {
                charArray.push(String.fromCharCode(src[i]));
            }
            base64String = charArray.join("");
            if (options === Type.MIME || options === Type.MIME_URL_SAFE) {
                base64String = base64String.replace(new RegExp("[\\r\\n]", "g"), "");
            }
            return Base64Helper.decodeBase64(base64String, options === Type.BASIC_URL_SAFE || options === Type.MIME_URL_SAFE);
        }

        decodeSync(src: string, options: Type = Type.BASIC): Uint8Array {
            let newString: string = src;
            if (options === Type.MIME || options === Type.MIME_URL_SAFE) {
                newString = src.replace(new RegExp("[\\r\\n]", "g"), "");
            }
            return Base64Helper.decodeBase64(newString, options === Type.BASIC_URL_SAFE || options === Type.MIME_URL_SAFE);
        }

        encode(src: Uint8Array, options: Type = Type.BASIC): Promise<Uint8Array> {
            return Promise.resolve(this.encodeSync(src, options));
        }

        decode(src: string, options: Type = Type.BASIC): Promise<Uint8Array> {
            return Promise.resolve(this.decodeSync(src, options));
        }

        decode(src: Uint8Array, options: Type = Type.BASIC): Promise<Uint8Array> {
            return Promise.resolve(this.decodeSync(src, options));
        }

        encodeToString(src: Uint8Array, options: Type = Type.BASIC): Promise<string> {
            return Promise.resolve(this.encodeToStringSync(src, options));
        }
    }

    /**
    * The util.format() method returns a formatted string using the first argument as a printf-like
    * format string which can contain zero or more format specifiers.
    * Each specifier is replaced with the converted value from the corresponding argument.
    * Supported specifiers are:
    * %s: String will be used to convert all values except BigInt, Object and -0. BigInt values will be represented
    *     with an n and Objects that have no user defined toString function are inspected using util.inspect()
    *     with options { depth: 0, colors: false, compact: 3 }.
    * %d: Number will be used to convert all values except BigInt and Char.
    * %i: parseInt(value, 10) is used for all values except BigInt and Char.
    * %f: parseFloat(value) is used for all values expect Char.
    * %j: JSON. Replaced with the string '[Circular]' if the argument contains circular references.
    * %o: Object. A string representation of an object with generic JavaScript object formatting.
    *     Similar to util.inspect() with options { showHidden: true, showProxy: true }.
    *     This will show the full object including non-enumerable properties and proxies.
    * %O: Object. A string representation of an object with generic JavaScript object formatting.
    *     Similar to util.inspect() without options. This will show the full object not including non-enumerable
    *     properties and proxies.
    * %c: CSS. This specifier is ignored and will skip any CSS passed in.
    * %%: single percent sign ('%'). This does not consume an argument.
    *
    * @param s: <string> A printf-like format string.
    *
    * @param args: <Object[]> format params
    *
    * @returns Returns: <string> The formatted string
    */
    export function format(s: string, ...args: Object[]): string {
        let preI: int = 0
        let i: int = 0
        let argCounter = 0
        const flags: string = "cdfijoOs"
        let res = new StringBuilder
        let ss = ""
        if (args.length == 0) {
            return s.replaceAll("%%", "%")
        }

        while((i = (ss = s.substring(preI, s.length)).search("%") as int) != -1 && (preI + i < s.length - 1) && (argCounter < args.length)) {
            res.append(s.substring(preI, preI + i))
            let flagIndex = preI + i + 1
            //NOTE(ivan-tyulyandin): has to be string due to internal issue 21459
            let flag: string = s[flagIndex]
            if (flags.includes(flag)) {
                res.append(UtilHelper.processArg(flag, args[argCounter]))
                ++argCounter
            } else if (flag == "%") {
                res.append("%")
            } else {
                res.append("%" + flag)
            }
            preI += i + 2
        }
        if (preI < s.length) {
            res.append(s.substring(preI,s.length))
        }
        let strArgsList = UtilHelper.joinLastArgs(argCounter, ...args)
        let resStr = res.toString()
        return resStr.length == 0 ? res + strArgsList.slice(1) : res + strArgsList
    }

    export function generateRandomUUID(entropyCache?: boolean): string {
        let s = UtilHelper.generateRandomUUID((entropyCache == undefined) ? false : entropyCache)
        return s
    }

    export interface ScopeComparable<T> {

        /**
        * The comparison function is used by the scope.
        *
        * @param { ScopeComparable } other - Other
        * @returns { boolean } Returns whether the current object is greater than or equal to the input object.
        */
        compareTo(other: T): boolean;
    }

    /**
    * A type used to denote ScopeComparable or number.
    *
    * @typedef { ScopeComparable }
    */
    export type ScopeType<T> = ScopeComparable<T>;

    export class ScopeHelper<T extends ScopeComparable<T>> {
        private readonly _lowerLimit: T
        private readonly _upperLimit: T

        /**
        * A constructor used to create a Scope instance with the lower and upper bounds specified.
        *
        * @param { ScopeType } lowerObj - A ScopeType value
        * @param { ScopeType } upperObj - A ScopeType value
        */
        constructor(lowerObj: T, upperObj: T) {
            if (lowerObj.compareTo(upperObj)) {
                throw new Error('lower limit must be less than upper limit');
            }
            this._lowerLimit = lowerObj
            this._upperLimit = upperObj
        }

        /**
        * Obtains a string representation of the current range.
        *
        * @returns { string } Returns a string representation of the current range object.
        */
        toString(): string {
            let strLower: string = this._lowerLimit.toString()
            let strUpper: string = this._upperLimit.toString()
            return '[' + strLower + ', ' + strUpper + ']'
        }

        /**
        * Returns the intersection of a given range and the current range.
        *
        * @param { ScopeHelper } range - A Scope range object
        * @returns { ScopeHelper } Returns the intersection of a given range and the current range.
        */
        intersect(range: ScopeHelper<T>): ScopeHelper<T> {
            let lowerLimit = this._lowerLimit.compareTo(range.getLower()) ? this._lowerLimit : range.getLower()
            let upperLimit = this._upperLimit.compareTo(range.getUpper()) ? range.getUpper() : this._upperLimit
            return new ScopeHelper<T>(lowerLimit, upperLimit)
        }

        /**
        * Returns the intersection of the current range and the range specified by the given lower and upper bounds.
        *
        * @param { ScopeType } lowerObj - A ScopeType value
        * @param { ScopeType } upperObj - A ScopeType value
        * @returns { ScopeHelper } Returns the intersection of the current range and the range specified by the given lower and upper bounds.
        */
        intersect(lowerObj: T, upperObj: T): ScopeHelper<T> {
            let lowerLimit = this._lowerLimit.compareTo(lowerObj) ? this._lowerLimit : lowerObj
            let upperLimit = this._upperLimit.compareTo(upperObj) ? upperObj : this._upperLimit
            return new ScopeHelper<T>(lowerLimit, upperLimit)
        }

        /**
        * Obtains the upper bound of the current range.
        *
        * @returns { ScopeType } Returns the upper bound of the current range.
        */
        getUpper(): T {
            return this._upperLimit
        }

        /**
        * Obtains the lower bound of the current range.
        *
        * @returns { ScopeType } Returns the lower bound of the current range.
        */
        getLower(): T {
            return this._lowerLimit
        }

        /**
        * Creates the smallest range that includes the current range and the given lower and upper bounds.
        *
        * @param { ScopeType } lowerObj - A ScopeType value
        * @param { ScopeType } upperObj - A ScopeType value
        * @returns { ScopeHelper } Returns the smallest range that includes the current range and the given lower and upper bounds.
        */
        expand(lowerObj: T, upperObj: T): ScopeHelper<T> {
            let lowerLimit = this._lowerLimit.compareTo(lowerObj) ? lowerObj : this._lowerLimit 
            let upperLimit = this._upperLimit.compareTo(upperObj) ? this._upperLimit : upperObj
            return new ScopeHelper<T>(lowerLimit, upperLimit)
        }

        /**
        * Creates the smallest range that includes the current range and a given range.
        *
        * @param { ScopeHelper } range - A Scope range object
        * @returns { ScopeHelper } Returns the smallest range that includes the current range and a given range.
        */
        /**
        * Creates the smallest range that includes the current range and a given range.
        *
        * @param { ScopeHelper } range - A Scope range object
        * @returns { ScopeHelper } Returns the smallest range that includes the current range and a given range.
        */
        expand(range: ScopeHelper<T>): ScopeHelper<T> {
            let lowerLimit = this._lowerLimit.compareTo(range.getLower()) ? range.getLower() : this._lowerLimit
            let upperLimit = this._upperLimit.compareTo(range.getUpper()) ? this._upperLimit : range.getUpper()
            return new ScopeHelper<T>(lowerLimit, upperLimit)
        }

        /**
        * Creates the smallest range that includes the current range and a given value.
        *
        * @param { ScopeType } value - A ScopeType value
        * @returns { ScopeHelper } Returns the smallest range that includes the current range and a given value.
        */
        expand(value: T): ScopeHelper<T> {
            let lowerLimit = this._lowerLimit.compareTo(value) ? value : this._lowerLimit
            let upperLimit = this._upperLimit.compareTo(value) ? this._upperLimit : value
            return new ScopeHelper<T>(lowerLimit, upperLimit)
        }

        /**
        * Checks whether a given value is within the current range.
        *
        * @param { ScopeType } value - A ScopeType value
        * @returns { boolean } If the value is within the current range return true,otherwise return false.
        */
        contains(value: T): boolean {
            let lowerRes = value.compareTo(this._lowerLimit)
            let upperRes = this._upperLimit.compareTo(value)
            return lowerRes && upperRes
        }

        /**
        * Checks whether a given range is within the current range.
        *
        * @param { ScopeHelper } range - A Scope range
        * @returns { boolean } If the current range is within the given range return true,otherwise return false.
        */
        contains(range: ScopeHelper<T>): boolean {
            let lowerRes = range.getLower().compareTo(this._lowerLimit)
            let upperRes = this._upperLimit.compareTo(range.getUpper())
            return lowerRes && upperRes
        }

        /**
        * Clamps a given value to the current range.
        *
        * @param { ScopeType } value - A ScopeType value
        * @returns { ScopeType } Returns a ScopeType object that a given value is clamped to the current range.
        */
        clamp(value: T): T {
            if (!value.compareTo(this._lowerLimit)) {
                return this._lowerLimit
            } else if (value.compareTo(this._upperLimit)) {
                return this._upperLimit
            } else {
                return value
            }
        }
    }

    export interface DecoderOptions {
        fatal?: boolean;
        ignoreBOM?: boolean;
    }

    export interface DecodeToStringOptions {
        stream?: boolean;
    }

    const typeErrorCode = 401;
    class BusinessError extends Error {
        code: number;
        constructor(msg: string) {
            super(msg);
            this.name = 'BusinessError';
            this.code = typeErrorCode;
        }
    }

    export class TextDecoder {

        static { loadLibrary("commonlib_ets_ani") }

        encoding_: string = "utf-8";
        fatal_: boolean = false;
        ignoreBOM_: boolean = false;
        CONVERTER_FLAGS_FATAL = 0x2;
        CONVERTER_FLAGS_IGNORE_BOM = 0x4;
        private nativeDecoder_: long;

        constructor(encoding?: string, options?: DecoderOptions) {
            let flags = 0;
            if (encoding) {
                this.encoding_ = encoding;
            }
            if (options) {
                flags |= options.fatal ? this.CONVERTER_FLAGS_FATAL : 0;
                flags |= options.ignoreBOM ? this.CONVERTER_FLAGS_IGNORE_BOM : 0;
                this.fatal_ = options.fatal ?? false;
                this.ignoreBOM_ = options.ignoreBOM ?? false;
            }
            this.bindNativeDecoder(this.encoding_, flags);
        }

        static create(encoding?: string, options?: DecoderOptions) {
            if (encoding && options) {
                return new TextDecoder(encoding, options);
            } else if (encoding) {
                return new TextDecoder(encoding);
            } else {
                return new TextDecoder();
            }
        }

        public decodeToString(input: Uint8Array, options?: DecodeToStringOptions): string {
            if (input.length === 0) {
                return '';
            }
            return this.decode(input, options?.stream ?? false);
        }

        get encoding(): string {
            return this.encoding_;
        }

        get fatal(): boolean {
            return this.fatal_;
        }

        get ignoreBOM(): boolean {
            return this.ignoreBOM_;
        }

        private native bindNativeDecoder(encoding: string, flags: int): void;
        private native decode(input: Uint8Array, decodeWithStream: boolean): string;
    }
} // namespace Util

